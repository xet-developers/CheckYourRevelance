// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using xetiumAPI.ServerApp.Dal.Models.Repository;

#nullable disable

namespace xetiumAPI.Migrations
{
    [DbContext(typeof(AnalyticsContextDb))]
    [Migration("20231204163128_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("xetiumAPI.ServerApp.Dal.KeywordDal", b =>
                {
                    b.Property<int>("KeywordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("keywordid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("KeywordID"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("text");

                    b.HasKey("KeywordID");

                    b.ToTable("keyword");
                });

            modelBuilder.Entity("xetiumAPI.ServerApp.Dal.KeywordResultDal", b =>
                {
                    b.Property<int>("SearchID")
                        .HasColumnType("integer")
                        .HasColumnName("searchid")
                        .HasColumnOrder(0);

                    b.Property<int>("KeywordID")
                        .HasColumnType("integer")
                        .HasColumnName("keywordid")
                        .HasColumnOrder(1);

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.HasKey("SearchID", "KeywordID");

                    b.HasIndex("KeywordID");

                    b.ToTable("keywordresult");
                });

            modelBuilder.Entity("xetiumAPI.ServerApp.Dal.ProjectDal", b =>
                {
                    b.Property<int>("ProjID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("projid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("url");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("ProjID");

                    b.HasIndex("UserName");

                    b.ToTable("project");
                });

            modelBuilder.Entity("xetiumAPI.ServerApp.Dal.SearchDal", b =>
                {
                    b.Property<int>("SearchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("searchid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SearchID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<int>("ProjID")
                        .HasColumnType("integer")
                        .HasColumnName("projid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.HasKey("SearchID");

                    b.HasIndex("ProjID");

                    b.ToTable("search");
                });

            modelBuilder.Entity("xetiumAPI.ServerApp.Dal.TokenDal", b =>
                {
                    b.Property<int>("TokenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tokenid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TokenID"));

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiresat");

                    b.Property<DateTime>("LastUsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastusedat");

                    b.Property<byte[]>("TokenValue")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("tokenvalue");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.HasKey("TokenID");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("tokens");
                });

            modelBuilder.Entity("xetiumAPI.ServerApp.Dal.UserDal", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("username");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("passworhash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");

                    b.Property<Guid>("Salt")
                        .HasColumnType("uuid")
                        .HasColumnName("salt");

                    b.HasKey("UserName");

                    b.ToTable("users");
                });

            modelBuilder.Entity("xetiumAPI.ServerApp.Dal.KeywordResultDal", b =>
                {
                    b.HasOne("xetiumAPI.ServerApp.Dal.KeywordDal", "Keyword")
                        .WithMany("KeywordResults")
                        .HasForeignKey("KeywordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("xetiumAPI.ServerApp.Dal.SearchDal", "SearchDal")
                        .WithMany("KeywordResults")
                        .HasForeignKey("SearchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("SearchDal");
                });

            modelBuilder.Entity("xetiumAPI.ServerApp.Dal.ProjectDal", b =>
                {
                    b.HasOne("xetiumAPI.ServerApp.Dal.UserDal", "UserDal")
                        .WithMany("Projects")
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDal");
                });

            modelBuilder.Entity("xetiumAPI.ServerApp.Dal.SearchDal", b =>
                {
                    b.HasOne("xetiumAPI.ServerApp.Dal.ProjectDal", "Project")
                        .WithMany("Searches")
                        .HasForeignKey("ProjID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("xetiumAPI.ServerApp.Dal.TokenDal", b =>
                {
                    b.HasOne("xetiumAPI.ServerApp.Dal.UserDal", "UserDal")
                        .WithOne("TokenDal")
                        .HasForeignKey("xetiumAPI.ServerApp.Dal.TokenDal", "UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDal");
                });

            modelBuilder.Entity("xetiumAPI.ServerApp.Dal.KeywordDal", b =>
                {
                    b.Navigation("KeywordResults");
                });

            modelBuilder.Entity("xetiumAPI.ServerApp.Dal.ProjectDal", b =>
                {
                    b.Navigation("Searches");
                });

            modelBuilder.Entity("xetiumAPI.ServerApp.Dal.SearchDal", b =>
                {
                    b.Navigation("KeywordResults");
                });

            modelBuilder.Entity("xetiumAPI.ServerApp.Dal.UserDal", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("TokenDal")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
